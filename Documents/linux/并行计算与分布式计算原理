# 并行计算与分布式计算原理
*深入理解云计算——基本原理和应用程序编程技术，第二章*

<!-- MarkdownTOC -->

- [并行计算和分布式计算](#并行计算和分布式计算)
- [并行计算基本要素](#并行计算基本要素)
	- [什么是并行处理](#什么是并行处理)
	- [并行处理硬件架构](#并行处理硬件架构)
	- [并行编程方法](#并行编程方法)
	- [并行性的级别](#并行性的级别)
	- [注意事项](#注意事项)
- [分布式计算基本要素](#分布式计算基本要素)
	- [通用概念和定义](#通用概念和定义)
	- [分布式系统组件](#分布式系统组件)
	- [分布式计算架构模式](#分布式计算架构模式)
	- [进程间通信模型](#进程间通信模型)
- [分布式计算技术](#分布式计算技术)

<!-- /MarkdownTOC -->

<a name="并行计算和分布式计算"></a>
## 并行计算和分布式计算

并行计算和分布式计算存在细微差别。并行代表一类紧耦合系统，分布式代表更更广泛的一类系统，包括紧耦合系统。

**并行计算**指将计算任务分配给几个共享相同内存的处理器的计算模式。并行计算系统的架构通常表现为组件的同构性：每个处理器都是相同类型的，且拥有相同的处理性能。共享内存有一个独立的地址空间，可供所有处理器访问。并行程序被分成若干执行单元并分配给不同的处理器，它们之间依靠共享内存相互通信。

**分布式计算**指哪些将计算任务进行划分，并在不同计算单元中同时执行的架构或系统，不论计算单元是不同节点上的处理器，或是同一计算机上的处理器，再或是同一处理器中的内核。相比并行计算，分布式计算包含的系统和应用程序的范围更广，是更为通用的概念。分布式这一术语通常以为着计算单元的位置不同，且这些单元在硬件和软件功能上也可能各不相同。典型的分布式系统实例是计算网格或互谅网计算系统，分布式系统再全球范围内集成各种架构、系统和应用。

<a name="并行计算基本要素"></a>
## 并行计算基本要素

<a name="什么是并行处理"></a>
### 什么是并行处理

同时在多个处理器上处理多个任务成为**并行处理**。并行程序由多个活跃进程（任务）组成，同时解决给定的问题。运用分治法将一个给定的任务分为多个子任务，每个子任务在不同的中央处理器（CPU）中进行处理。运用分治法在多处理器系统上编程称作**并行编程**。

历史背景和推动技术
...

<a name="并行处理硬件架构"></a>
### 并行处理硬件架构

并行处理的核心元素是CPU。根据可以同时处理的指令流和数据流的数量，计算机系统可以分为以下四类：

+ 单指令流单数据流（SISD）系统
+ 单指令流多数据流（SIMD）系统
+ 多指令流单数据流（MISD）系统
+ 多指令流多数据流（MIMD）系统
	- 共享内存MIMD计算机
	- 分布式内存MIMD计算机

<a name="并行编程方法"></a>
### 并行编程方法

顺序程序运行在单个处理器上且有单一控制线程。为了让几个处理器共同处理同一程序，就必须将该程序分成更小的、独立的块，这样每个处理器只需处理单独的一小块程序。以这种方式分解的程序就是并行程序。

并行程序设计有多种方法，最著名的几种是：
+ 数据并行
+ 处理并行
+ “农场主和工作者”模式

<a name="并行性的级别"></a>
### 并行性的级别

|*颗粒大小*|*代码*|*并行化执行者*|
|--------|----|------------|
|大|独立的或重量级进程|程序设计员|
|中|函数或过程|程序设计员|
|小|循环或指令块|并行编译器|
|极小|指令|处理器|

<a name="注意事项"></a>
### 注意事项

例如，对于给定的n个处理器，用户希望速度也增加n倍，但这只是理想情况，由于通信开销而不太可能实现。

两个重要原则
+ 计算速度和系统成本的平方根成反比
+ 并行计算速度和处理器数量成对数冠以（y=klog(N)）

<a name="分布式计算基本要素"></a>
## 分布式计算基本要素

<a name="通用概念和定义"></a>
### 通用概念和定义

分布式计算主要研究用于构建和管理分布式系统的模型、架构和算法。

```
分布式系统是独立计算机的集合，对于用户来说是一个整体系统。
```

该定义大致包括了多种类型的分布式计算系统，这些系统统一使用和集成分布式资源。本章重点讲解将多个独立计算机转化为整体系统的架构模型。通信是分布式计算的基础之一。由于分布式系统由协同工作的多个计算机组成，所以有必要利用网络实现多计算机之间的数据和信息交换：

```
分布式系统组件位于仅能通过传递消息来通信和协调活动的网络计算机中。
```

<a name="分布式系统组件"></a>
### 分布式系统组件

分布式系统是从硬件到软件的整个计算层次模型中多个组件交互的结果。许多组件协同工作，为用户呈现出一个单一的整体系统。

在底层，计算机和网络硬件构成了物理基础设置，这些组件由操作系统直接管理。操作系统负责提供基础服务，用于进程间通信、进程调度和管理、文件系统和本地设备的资源管理。将网络和计算机这两层合并为一个平台，在这个平台上配置特定软件，便可将联网计算机组成一个分布式系统。

将公认的标准应用到操作系统层甚至硬件网络层中，利用异构组件可以很容易地构造一个统一的集成系统。例如，不同设备之间的网络连接由协议进行控制，实现设备无缝执行交互。在操作系统层，进程间通信服务在标准化通信协议下执行，例如TCP/IP协议、UDP协议等。

中间件层利用这些服务构建了一个开发和部署分布式应用程序的统一环境。这一层支持分布式系统的编程范式，我们将在本书第5~7章进行描述。依靠操作系统提供的服务，中间件层可开发协议、数据格式以及用于开发分布式应用程序的编程语言和框架。这些为分布式应用程序开发人员提供了同一接口，完全独立于底层操作系统且屏蔽了底层的异构性。

<a name="分布式计算架构模式"></a>
### 分布式计算架构模式

尽管分布式系统包含若干层之间的交互，但只有中间件层才能够进行分布式计算，因为中间件层为应用提供了同一的整体运行环境。可采用多种不同的方式来组织组件，整合并购成分布式计算系统。这些组件之间的交互以及组件的职责决定了中间件的结构和类型，话句话说，也就是定义了中间件架构。了解架构模式有助于从整体上理解和划分软件系统结构，尤其是分布式计算结构。

```
架构模式组要用于决定组件和连接器，组件、连接器以及结合条件一起作为架构模式的实例。
```

架构模式分为两大类：
+ 软件架构模式
+ 系统架构模式

第一类与软件的逻辑结构有关，第二类包括从组件方面描述分布式软件系统物理结构的所有方式。

#### 组件和连接器

*组件*代表一个封装了系统的功能或特性的软件单元。组件实例可以是程序、对象、进程、管道或过滤器。连接器是一种允许组件之间进行合作和协调的通信机制。与组件不同的是，连接器不封装在单一实体中，而是以分布式方式由多个系统组件实现。

#### 软件架构模式

|*种类*|*最常用的架构模式*|
|----|----------------|
|数据中心|仓库<br>黑板|
|数据流|管道和过滤器<br>顺序批处理|
|虚拟机|基于规则的系统<br>解释器|
|调用和返回|主程序和子程序调用/自上而下的系统<br>面向对象系统<br>分层系统|
|独立组件|通信系统<br>事件系统|

#### 系统架构模式

+ 客户端/服务器

+ 对等

<a name="进程间通信模型"></a>
### 进程间通信模型

分布式系统由一组通过网络连接的、交互的并发进程组成。因此，进程间通信（IPC）是分布式系统设计和实现的基础。IPC既用于交换数据和信息，也用于协调进程活动。IPC将分布式系统的不同组件连接起来，使其成为一个系统。

#### 基于消息的通信

+ 消息传递
	MPI，OpenMP
+ 远程过程调用
	RPC
+ 分布式对象
	RPC模型基于面向对象范式的实现，将方法的远程调用看做对象。CORBA,COM，DCOM,COM+,RMI,.net
+ 分布式代理和活动对象
+ web服务
	SOAP,REST

#### 基于消息的通信模型

+ 点对点消息模型
+ 发布和订阅消息模型
+ 请求-应答消息模型

<a name="分布式计算技术"></a>
## 分布式计算技术